/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package com.ericsson.eif.tfs.oslc;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.servlet.ServletContextEvent;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.ericsson.eif.tfs.oslc.exception.UnauthorizedException;
import com.ericsson.eif.tfs.oslc.mapping.AttributesMapper;
import com.ericsson.eif.tfs.oslc.mapping.ProductMapper;
import com.ericsson.eif.tfs.oslc.mapping.TFSMapper;
import com.ericsson.eif.tfs.oslc.resources.TFSChangeRequest;
import com.ericsson.eif.tfs.oslc.servlet.ServiceProviderCatalogSingleton;
import com.ericsson.eif.tfs.oslc.servlet.ServletListener;
import com.microsoft.tfs.core.TFSTeamProjectCollection;
import com.microsoft.tfs.core.clients.workitem.WorkItem;
import com.microsoft.tfs.core.clients.workitem.WorkItemClient;
import com.microsoft.tfs.core.clients.workitem.project.Project;
import com.microsoft.tfs.core.clients.workitem.project.ProjectCollection;
import com.microsoft.tfs.core.clients.workitem.query.WorkItemCollection;
// Start of user code imports

// End of user code


// Start of user code pre_class_code
// End of user code

public class TFSAdapterManager {

	// Start of user code class_attributes
    public static final String REALM = "TFS";
    public static String adapterServletHome;
    private static String propertiesFilePath;
    private static String contextPath;
    private static String tfsServerUrl; // = "http://server:port/tfs/";
    private static String collectionUrl; // = serverUrl + "DefaultCollection";
    private static String sdkUser;
    private static String sdkPassword;
    private static String tfsCollection;

    // user/password configured in adapter.properties for authentication
    // with this adapter:
    private static String adapterUser;
    private static String adapterPassword;
    private static boolean authenticationDisabled = false;
    
    private static String attributesMappingFile;
    private static String customerMappingFile;
    private static String productMappingFile;
    
    private static String mhweb_related_cr_url;

    private static Logger logger = LogManager.getLogger(TFSAdapterManager.class.getName());

	// End of user code
	
	// Start of user code class_methods

    public static void clearSession() {
        // TODO Auto-generated method stub

    }

    public static String getAdapterServletHome() {
        // TODO Auto-generated method stub
        return adapterServletHome;
    }

    public static String getCollectionUrl() {
        return collectionUrl;
    }
    
    public static String getMhweb_related_cr_url() {
        return mhweb_related_cr_url;
    }
    
    public static String getTfsCollection() {
        return tfsCollection;
    }

    public static boolean isConnected() {
        // if not null we should be connected..
        return TFSConnector.getConnector() != null;
    }
    
    public static boolean isAuthenticationDisabled() {
        return authenticationDisabled;
    }
    
    public static void logAndExit(String message) {
        Logger.getLogger(TFSAdapterManager.class).error(message);
        throw new RuntimeException(message);
    }

	private static void initialize(ServletContextEvent event) {
		Properties properties = new Properties();

		String adapterHome = System.getenv("ADAPTER_HOME");
		if (adapterHome == null) {
			// default to user home
			adapterHome = System.getProperty("user.home");
		}

		// for testing - support event == null
		if (event != null) {
		    contextPath = event.getServletContext().getContextPath();
		} else {
		    contextPath = "/tfs";
		}
		// The contextPath has a leading "/" - remove
		contextPath = contextPath.substring(1);
		adapterServletHome = adapterHome + File.separator + contextPath;
		
		// Configure log4j. If config file not found, and before it's read
		// log output is per default going to the Console. When tomcat is 
		// running as window service, you need to provide extra config to get
		// the console output according to doc at:
		// http://tomcat.apache.org/tomcat-7.0-doc/windows-service-howto.html
		File log4jProperties = new File(adapterServletHome + File.separator
				+ "log4j.properties");
		if (log4jProperties.exists()) {
			// Allow using adapter home path in log4j file
			System.setProperty("tfs.adapter_home", adapterHome);
			
			PropertyConfigurator.configure(log4jProperties.getPath());
	
		} else {
			logger.warn(log4jProperties.getPath() + " not found");
		}
		
		// Log4j now initialized
		logger.info("Initialize of TFS adapter stated ...");

		// Need the properties file - if not found, exit
		propertiesFilePath = adapterServletHome + File.separator
				+ "adapter.properties";
		File propertiesFile = new File(propertiesFilePath);
		if (propertiesFile.exists()) {
			try {
				properties.load(new FileInputStream(propertiesFile.toString()));
			} catch (IOException e) {
				logAndExit("Failed to read the adapter.properties file ["
						+ propertiesFilePath + "] - will exit");
			}
		} else {
			logAndExit("No adapter.properties file found, will exit ["
					+ propertiesFilePath + "]");
		}

		sdkUser = properties.getProperty("tfs_sdk_user", null);
		sdkPassword = properties.getProperty("tfs_sdk_password", null);
		
		adapterUser = properties.getProperty("tfs_adapter_user");
		adapterPassword = properties.getProperty("tfs_adapter_password");
		authenticationDisabled = Boolean.parseBoolean(
		        properties.getProperty("tfs_authentication_disabled", "False"));
		
		// Get settings for host, scheme and port. 
        String adapterServer = properties.getProperty("tfs_adapter_server");
        if (adapterServer != null) {
        	System.setProperty(ServletListener.PROPERTY_HOST, adapterServer);
            logger.log(Level.INFO, "Property tfs_adapter_server = "
                    + adapterServer);
        }
        String adapterScheme = properties.getProperty("tfs_adapter_server_scheme");
        if (adapterScheme != null) {
        	System.setProperty(ServletListener.PROPERTY_SCHEME, adapterScheme);
            logger.log(Level.INFO, "Property tfs_adapter_server_scheme = "
                    + adapterScheme);
        }
        String adapterPort = properties.getProperty("tfs_adapter_server_port");
        if (adapterPort != null) {
        	System.setProperty(ServletListener.PROPERTY_PORT, adapterPort);
            logger.log(Level.INFO, "Property tfs_adapter_server_port = "
                    + adapterPort);
        }   
		
		// the tfs mapper will load field names
		TFSMapper.getInstance().load();
		
		// get the attributes mapping file - required - and load it:
		attributesMappingFile = properties.getProperty("tfs_adapter_mapping_file");
		if (attributesMappingFile == null) {
		    logAndExit("Attributes mapping missing - exiting");
		}
		AttributesMapper.getInstance().load();

        // get the customer mapping file - required - and load it:
        customerMappingFile = properties.getProperty("tfs_customer_mapping_file");
        if (customerMappingFile == null) {
            logAndExit("Customers mapping missing - exiting");
        }
        AttributesMapper.getInstance().addMappingRules(customerMappingFile, true);

        // get the product mapping file - required - and load it:
        productMappingFile = properties.getProperty("tfs_product_mapping_file");
        if (productMappingFile == null) {
            logAndExit("Products mapping missing - exiting");
        }
        ProductMapper.getInstance().load();

		// Configure TFS native library:
		String tfsNativeDir = properties
				.getProperty("tfs_native_base_directory");
		if (tfsNativeDir != null && (new File(tfsNativeDir)).isDirectory()) {
			System.setProperty("com.microsoft.tfs.jni.native.base-directory",
					tfsNativeDir);
		} else {
			logAndExit("No tfs_native_base_directory property defined or directory not found, will exit ["
					+ tfsNativeDir + "]");
		}

		tfsServerUrl = properties.getProperty("tfs_server_url", null);
		tfsCollection = properties.getProperty("tfs_collection", 
		                                              "DefaultCollection");
		
		mhweb_related_cr_url = properties.getProperty("mhweb_related_cr_url", null);
        if (mhweb_related_cr_url == null) {
            logAndExit("mhweb_related_cr_url required but missing in "
                    + propertiesFilePath);
        }
        // ensure link ends with "/":
        if (!mhweb_related_cr_url.endsWith("/")) {
            mhweb_related_cr_url += "/";
        }
        
		for (Object key : properties.keySet()) {
	        Object value = properties.get(key);
			if (value instanceof String) {
			    if (key.toString().contains("password")) {
			        logger.debug(key + " -> ***");
			    } else {
    				String s = (String) value;
    				logger.debug(key + " -> " + s);
    			}
			}
		}
		if (tfsServerUrl != null) {
			collectionUrl = tfsServerUrl + "/" + tfsCollection;
		} else {
			logAndExit("TFS server and/or port missing in "
					+ propertiesFilePath);
		}
		
		// Initialize the TFSConnection:
		try {
            TFSConnector.initialize(getSDKCredentials());
        } catch (UnauthorizedException | URISyntaxException e) {
            // Fatal - cannot connect to TFS
            String message = e.getLocalizedMessage();
            logger.error(message, e);
            throw new RuntimeException(e);
        }

		logger.info("Initialize of TFS adapter done.");
	}
    
    public static String createWorkItem(HttpServletRequest httpServletRequest,
            final TFSChangeRequest changeRequest, 
            final String workItemIdString) {
        String workItemId = null;
        //TODO/FA: implement...
        return workItemId ;
    }
    
    public static String getTfsServerUrl() {
        return tfsServerUrl;
    }

    // End of user code


    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		// Establish connection to data backbone etc ...
		// Start of user code contextInitializeServletListener
        initialize(servletContextEvent);
		// End of user code
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// Shutdown connections to data backbone etc...
		// Start of user code contextDestroyed
		// End of user code
	}



    public static ServiceProviderInfo [] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
		ServiceProviderInfo [] serviceProviderInfos = {};
		// Start of user code (MUST_FILL_IN) getServiceProviderInfos userCode
		//TODO/FA --^^
//        TFSConnector connector = TFSConnector.getAuthorized(httpServletRequest);
//        TFSTeamProjectCollection tpc = connector.getTpc();
		TFSTeamProjectCollection tpc = TFSConnector.getTpc();
        
        // The getName() will return the full url to the collection. We want the end segment.
        String[] tpcUrl = tpc.getName().split("/");
        String tpcName = tpcUrl[tpcUrl.length - 1];
        
        ProjectCollection projects = tpc.getWorkItemClient().getProjects();
        List<ServiceProviderInfo> spis = new ArrayList<ServiceProviderInfo>();
        for (Project project : projects.getProjects()) {
            ServiceProviderInfo spi = new ServiceProviderInfo();
            spi.name = project.getName();
            
            spi.collectionId = tpcName;
            
            // TODO: The project name seem to be non-changeable as it's part of the url
            // to a workitem in tfs. So - could have project name here instead of id.
            // Pro: readability, Con: length of url.

//            try {
//				String projectName = URLEncoder.encode(project.getName(), "UTF-8");
//				spi.serviceProviderId = projectName;
//			} catch (UnsupportedEncodingException e) {
//			}
            
            spi.serviceProviderId = String.valueOf(project.getID());
            
            spis.add(spi);
        }
		
		
		serviceProviderInfos = spis.toArray(new ServiceProviderInfo[0]);
		
        // End of user code
		return serviceProviderInfos;
    }

//    public static TFSChangeRequest getTFSChangeRequest(HttpServletRequest httpServletRequest, String tFSChangeRequestId, String serviceProviderId)
//    {
//		TFSChangeRequest aTFSChangeRequest = null;
//		// Start of user code (MUST_FILL_IN) getResource userCode
//        //TFSConnector connector = TFSConnector.getAuthorized(httpServletRequest);
//        //TFSTeamProjectCollection tpc = connector.getTpc();
//        TFSTeamProjectCollection tpc = TFSConnector.getTpc();
//        WorkItemClient workItemClient = tpc.getWorkItemClient();
//        Project project = workItemClient.getProjects().getByID(new Integer(serviceProviderId));
//        String wiqlQuery = "Select ID, Title from WorkItems where" +
//                "(System.TeamProject = '" + project.getName() + "')"
//                ;
//        WorkItemCollection workItems = workItemClient.query(wiqlQuery);
//        for (int i=0; i<workItems.size(); i++) {
//            WorkItem workItem = workItems.getWorkItem(i);
//            if (tFSChangeRequestId.equals(workItem.getID() + "")) {
//                aTFSChangeRequest = TFSChangeRequest.fromWorkItem(workItem);
//                break;
//            }
//        }
//
//		// End of user code
//		return aTFSChangeRequest;
//    }

    public static List<TFSChangeRequest> getTFSChangeRequests(HttpServletRequest httpServletRequest, String serviceProviderId, int page, int limit)
    {
		List<TFSChangeRequest> tFSChangeRequests = null;
		// Start of user code (MUST_FILL_IN) getResources userCode
        //TODO/FA: Why was this code overwritten by the generator?
		tFSChangeRequests = new ArrayList<>();
		//TFSConnector connector = TFSConnector.getAuthorized(httpServletRequest);
		//TFSTeamProjectCollection tpc = connector.getTpc();
		TFSTeamProjectCollection tpc = TFSConnector.getTpc();
		WorkItemClient workItemClient = tpc.getWorkItemClient();
//		Project project = workItemClient.getProjects().getByID(new Integer(serviceProviderId));
//		String wiqlQuery = "Select ID, Title from WorkItems where" +
//		        "(System.TeamProject = '" + project.getName() + "')"
//		        ;
		String wiqlQuery = "Select ID, Title from WorkItems";
		WorkItemCollection workItems = workItemClient.query(wiqlQuery);
		for (int i=0; i<workItems.size(); i++) {
		    WorkItem workItem = workItems.getWorkItem(i);
		    TFSChangeRequest tfsCr = TFSChangeRequest.fromWorkItem(workItem);
		    if (tfsCr != null) {
		        URI about;
                try {
                    String aboutStr = ServletListener.getServicesBase() + "/workitems/" + workItem.getID();
                    about = new URI(aboutStr);
                    tfsCr.setAbout(about);
                } catch (URISyntaxException e) {
                    //TODO/FA: fix logging/handling...
                    e.printStackTrace();
                }
		        tfsCr.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId).getAbout());
		        tFSChangeRequests.add(tfsCr);
		    }
		}
		
		// End of user code
		return tFSChangeRequests;
    }

    public static List<TFSChangeRequest> searchTFSChangeRequests(HttpServletRequest httpServletRequest, String serviceProviderId, String terms)
    {
		List<TFSChangeRequest> tFSChangeRequests = null;
		// Start of user code (MUST_FILL_IN) searchResources userCode
		// End of user code
		return tFSChangeRequests;
    }

    public static TFSChangeRequest createTFSChangeRequest(HttpServletRequest httpServletRequest, final TFSChangeRequest aTFSChangeRequest, final String serviceProviderId)
    {
		TFSChangeRequest newTFSChangeRequest = null;
		// Start of user code (MUST_FILL_IN) createResource userCode
		// End of user code
		return newTFSChangeRequest;
    }

    public static Credentials getSDKCredentials() {
        if (sdkUser != null && sdkPassword != null) {
            return new Credentials(sdkUser, sdkPassword);
        }
        return null;
    }
    
    public static Credentials getAdapterUserCredentials() {
        if (adapterUser != null && adapterPassword != null) {
            return new Credentials(adapterUser, adapterPassword);
        }
        return null;
    }
    
    public static String getFieldMappingFile() {
    	// Field properties stored in the main properties file
    	return propertiesFilePath;
    }
    
    public static String getAttributesMappingFile() {
        return attributesMappingFile;
    }
    
    public static String getProductMappingFile() {
        return productMappingFile;
    }
}

