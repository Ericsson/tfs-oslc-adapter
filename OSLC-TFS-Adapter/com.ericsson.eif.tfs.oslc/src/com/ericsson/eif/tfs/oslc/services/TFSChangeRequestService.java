/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package com.ericsson.eif.tfs.oslc.services;


import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialogs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;

import com.ericsson.eif.tfs.oslc.TFSAdapterConstants;
import com.ericsson.eif.tfs.oslc.TFSAdapterManager;
import com.ericsson.eif.tfs.oslc.exception.CreateWorkItemException;
import com.ericsson.eif.tfs.oslc.exception.UpdateWorkItemException;
import com.ericsson.eif.tfs.oslc.factories.TFSChangeRequestFactory;
import com.ericsson.eif.tfs.oslc.resources.ChangeRequest;
import com.ericsson.eif.tfs.oslc.resources.EnterpriseChangeRequest;
import com.ericsson.eif.tfs.oslc.resources.TFSChangeRequest;
import com.ericsson.eif.tfs.oslc.servlet.ServiceProviderCatalogSingleton;
import com.ericsson.eif.tfs.oslc.utils.ValidationMessages;


// Start of user code imports
// End of user code


@OslcService(TFSAdapterConstants.TFSBUG_DOMAIN)
@Path("workitems/{collectionId}")
public class TFSChangeRequestService
	
{

	@Context private HttpServletRequest httpServletRequest;
	@Context private HttpServletResponse httpServletResponse;
	@Context private UriInfo uriInfo;
	
    public TFSChangeRequestService()
    {
        super();
    }

    /**
     * RDF/XML, XML and JSON representation of a change request collection
     * 
     * TODO:  add query support
     * 
     * @param productId
     * @param where
     * @param pageString
     * @return
     * @throws IOException
     * @throws ServletException
     */
    
    @OslcDialogs(
    {
        @OslcDialog
        (
             title = "Change Request Selection Dialog",
             label = "Change Request Selection Dialog",
             uri = "/workitems/{collectionId}/selector",
             hintWidth = "600px",
             hintHeight = "375px",
             resourceTypes = {TFSAdapterConstants.TYPE_TFSCHANGEREQUEST},
             usages = {OslcConstants.OSLC_USAGE_DEFAULT}
        )
    })   
    @OslcQueryCapability
    (
        title = "Change Request Query Capability",
        label = "Change Request Catalog Query",
        resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + TFSAdapterConstants.PATH_TFSCHANGEREQUEST,
        resourceTypes = {TFSAdapterConstants.TYPE_TFSCHANGEREQUEST},
        usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
    
	/**
	 * RDF/XML, XML and JSON representation of a all change requests in the collection
	 * NOTE: Could be returning a large number of items - OK to expose this?
	 * 
	 * @param collectionId
	 * @param where
	 * @param pageString
	 * @return 
	 * @throws IOException
	 * @throws ServletException
	 * @throws URISyntaxException
	 */
    
    @GET
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ChangeRequest [] getTFSChangeRequests(@PathParam("collectionId")   final String collectionId,
    		                                 		 @QueryParam("oslc.where") final String where,
    		                                 		 @QueryParam("page")       final String pageString) throws IOException, ServletException 
    {
    	int page=0;  
    	int limit=999;
        
		// Start of user code (MUST_FILL_IN) getResourceCollection_init
		// End of user code

    	//TODO/FA: The following code is broken when responding to GET on ...services/workitems/DefaultCollection
    	// since the method getTFSChangeRequests() expects a "serviceProviderId" but gets a "collectionId" which cause a whole lot of errors...
    	// Rewrite and/or reuse code from TFSWorkItemFactory (?)
//        final List<TFSChangeRequest> resources = TFSAdapterManager.getTFSChangeRequests(httpServletRequest, collectionId, page, limit);      
        List<EnterpriseChangeRequest> resources;
        try {
            resources = TFSChangeRequestFactory.getChangeRequests(collectionId, null, uriInfo);
            return resources.toArray(new ChangeRequest [resources.size()]);
        } catch (URISyntaxException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }      
        return null;
    }
    
    /**
     * HTML representation of change request collection
     * 
     * Forwards to changerequest_collection_html.jsp to build the html page
     * 
     * @param productId
     * @param changeRequestId
     * @param pageString
     * @return
     * @throws ServletException
     * @throws IOException
     */
	@GET
	@Produces({ MediaType.TEXT_HTML })
	public Response getTFSChangeRequestsAsHtml(@PathParam("collectionId")       final String collectionId,
			                          @PathParam("tFSChangeRequestId") final String tFSChangeRequestId,
			                          @QueryParam("page")           final String pageString) throws ServletException, IOException
	{
		int page=0;
		int limit=20;
		
		if (null != pageString) {
			page = Integer.parseInt(pageString);
		}

		// Start of user code (MUST_FILL_IN) getResourceCollectionAsHTML_init
		// End of user code

        final List<TFSChangeRequest> resources = TFSAdapterManager.getTFSChangeRequests(httpServletRequest, collectionId, page, limit);      
		
        if (resources!= null) {
        	httpServletRequest.setAttribute("resources", resources);
			// Start of user code (RECOMMENDED) getResourceCollectionAsHTML_setAttributes
			// End of user code

        	httpServletRequest.setAttribute("queryUri", 
                    uriInfo.getAbsolutePath().toString() + "?oslc.paging=true");
        	if (resources.size() > limit) {
        		resources.remove(resources.size() - 1);
        		httpServletRequest.setAttribute("nextPageUri", 
        				uriInfo.getAbsolutePath().toString() + "?oslc.paging=true&amp;page=" + (page + 1));
        	}
        	
        	ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, collectionId);
        	httpServletRequest.setAttribute("serviceProvider", serviceProvider);

        	RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ericsson/eif/tfs/oslc/tfschangerequestcollection_html.jsp");
			
        	rd.forward(httpServletRequest,httpServletResponse);
        }
		
		throw new WebApplicationException(Status.NOT_FOUND);	
	}


    
    /**
     * 
     * HTML representation for a single change request  - redirect the request directly to TFS WebUI
     * 
     * @param collectionId
     * @param changeRequestId
     * @throws ServletException
     * @throws IOException
     * @throws URISyntaxException
     */
    @GET
    @Path("{workItemId}")
    @Produces({ MediaType.TEXT_HTML })
    public Response getTFSChangeRequestAsHtml(
                    @PathParam("collectionId") final String collectionId,
                    @PathParam("workItemId") final String workItemId) throws ServletException, IOException, URISyntaxException
    {   
        //
        // NOTE - this method must be located above the getTFSChangeRequest() 
        // method, or Internet Explorer will call getTFSChangeRequest() instead 
        // get RDF/XML instead of HTML. This since IE accepts a too wide range
        // of content (*/*) instead of a more explict ranges, e.g. like Chrome
        // does with (text/html)
        //
        URI forwardUri = TFSChangeRequestFactory
                .getWorkItemUri(workItemId);
        httpServletResponse.sendRedirect(forwardUri.toString());
        return Response.seeOther(forwardUri).build();
    }


    
	/**
	 * RDF/XML, XML and JSON representation of a single change request
	 * 
     * @param collectionId
     * @param workItemId
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 * @throws URISyntaxException
	 */
    @GET
    @Path("{workItemId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ChangeRequest getTFSChangeRequest(@PathParam("collectionId")       final String collectionId,
                                                  @PathParam("workItemId") final String workItemId) throws IOException, ServletException, URISyntaxException
    {
	
		// Start of user code (MUST_FILL_IN) getResource_init
		// End of user code
        final EnterpriseChangeRequest ecr = TFSChangeRequestFactory.getChangeRequest(collectionId, workItemId, uriInfo);
        if (ecr != null) {
            return ecr;
        }
        throw new WebApplicationException(Status.NOT_FOUND);
    }


	
	/**
	 * OSLC delegated selection dialog for change requests
	 * 
	 * If called without a "terms" parameter, forwards to changerequest_selector.jsp to 
	 * build the html for the IFrame
	 * 
	 * If called with a "terms" parameter, sends a Bug search to Bugzilla and then 
	 * forwards to changerequest_filtered_json.jsp to build a JSON response
	 * 
	 * 
	 * @param terms
	 * @param productId
	 * @throws ServletException
	 * @throws IOException
	 */

    /*  
     * Here create a ChangeRequestCreateService in context of a collection, BUT need additional
     * parameter of the project. And believe bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=430390
     * will make that not possible for now.	
	
	@GET
	@Path("selector")
	@Consumes({ MediaType.TEXT_HTML, MediaType.WILDCARD })
	public void tFSChangeRequestSelector(@QueryParam("terms")     final String terms,
						              @PathParam("serviceProviderId")  final String serviceProviderId) throws ServletException, IOException
	{
		try {
			// Start of user code (MUST_FILL_IN) resourceSelector_init
			// End of user code

			ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
			httpServletRequest.setAttribute("serviceProvider", serviceProvider);
			httpServletRequest.setAttribute("selectionUri",uriInfo.getAbsolutePath().toString());
			// Start of user code (RECOMMENDED) resourceSelector_setAttributes
			// End of user code

			if (terms != null ) {
				httpServletRequest.setAttribute("terms", terms);
				final List<TFSChangeRequest> resources = TFSAdapterManager.searchTFSChangeRequests(httpServletRequest, serviceProviderId, terms);      
				if (resources!= null) {
							httpServletRequest.setAttribute("resources", resources);
							RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ericsson/eif/tfs/oslc/tfschangerequestfilteredcollection_json.jsp"); 
							
							rd.forward(httpServletRequest, httpServletResponse);
				}
				//a empty search should return an empty list and not NULL!
				throw new WebApplicationException(Status.NOT_FOUND);	
			
			} else {
				try {	
					RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ericsson/eif/tfs/oslc/tfschangerequestselector_html.jsp"); 
					
					rd.forward(httpServletRequest, httpServletResponse);
					
				} catch (Exception e) {
					throw new ServletException(e);
				}
			}
		} catch (Exception e) {
			throw new WebApplicationException(e);
		}

	}
	
	*/
    
    /**
     * OSLC delegated creation dialog for a single change request
     * 
     * Forwards to changerequest_creator.jsp to build the html form
     * 
     * @param productId
     * @throws IOException
     * @throws ServletException
     */

    /*  
     * Here create a ChangeRequestCreateService in context of a collection, BUT need additional
     * parameter of the project. And believe bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=430390
     * will make that not possible for now.   	
	
    @GET
    @Path("creator") 
    @Consumes({MediaType.WILDCARD})
    public void tFSChangeRequestCreatorAsHtml(@PathParam("serviceProviderId") final String serviceProviderId) throws IOException, ServletException
    {
		// Start of user code (MUST_FILL_IN) resourceCreatorAsHTML_init
		// End of user code

		ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
		httpServletRequest.setAttribute("serviceProvider", serviceProvider);

		RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ericsson/eif/tfs/oslc/tfschangerequestcreator_html.jsp");
		
		rd.forward(httpServletRequest, httpServletResponse);
    }
	
*/	

    /**
     * Backend creator for the OSLC delegated creation dialog. 
     * 
     * Accepts the input in FormParams and returns a small JSON response
     * 
     * @param productId
     * @param component
     * @param version
     * @param summary
     * @param op_sys
     * @param platform
     * @param description
     */
    
    /*  
     * Here create a ChangeRequestCreateService in context of a collection, BUT need additional
     * parameter of the project. And believe bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=430390
     * will make that not possible for now.   
    
    @POST
    @Path("creator") 
    @Consumes({ MediaType.APPLICATION_FORM_URLENCODED})
    public void createTFSChangeRequest(@PathParam("serviceProviderId")   final String serviceProviderId)
    {
    	try {
    		TFSChangeRequest aTFSChangeRequest = new TFSChangeRequest();

    		String[] paramValues;

				paramValues = httpServletRequest.getParameterValues("discussedBy");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setDiscussedBy(new Link(new URI(paramValues[0])));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("title");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setTitle(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("implementsRequirement");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addImplementsRequirement(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("reviewed");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setReviewed(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("instanceShape");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setInstanceShape(new Link(new URI(paramValues[0])));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("verified");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setVerified(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("relatedTestScript");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addRelatedTestScript(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("blocksTestExecutionRecord");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addBlocksTestExecutionRecord(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("shortTitle");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setShortTitle(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("type");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addType(new Type(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("serviceProvider");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setServiceProvider(new URI(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("relatedChangeRequest");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addRelatedChangeRequest(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("tracksRequirement");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addTracksRequirement(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("team");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setTeam(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("subject");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addSubject(paramValues[i]);
						}
				}			
				paramValues = httpServletRequest.getParameterValues("testedByTestCase");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addTestedByTestCase(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("description");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setDescription(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("identifier");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setIdentifier(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("closed");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setClosed(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("contributor");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addContributor(new Person(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("modified");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setModified(new SimpleDateFormat().parse(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("closeDate");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setCloseDate(new SimpleDateFormat().parse(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("approved");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setApproved(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("affectsPlanItem");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addAffectsPlanItem(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("created");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setCreated(new SimpleDateFormat().parse(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("affectsRequirement");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addAffectsRequirement(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("inprogress");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setInprogress(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("affectedByDefect");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addAffectedByDefect(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("relatedTestPlan");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addRelatedTestPlan(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("fixed");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setFixed(new Boolean(paramValues[0]));
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("status");
				if (paramValues != null) {
						if (paramValues.length == 1) {
							if (paramValues[0].length() != 0)
								aTFSChangeRequest.setStatus(paramValues[0]);
							// else, there is an empty value for that parameter, and hence ignore since the parameter is not actually set.
						} 
					
				}			
				paramValues = httpServletRequest.getParameterValues("creator");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addCreator(new Person(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("relatedTestCase");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addRelatedTestCase(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("affectsTestResult");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addAffectsTestResult(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("relatedTestExecutionRecord");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addRelatedTestExecutionRecord(new Link(new URI(paramValues[i])));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("type");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addType(new URI(paramValues[i]));
						}
				}			
				paramValues = httpServletRequest.getParameterValues("tracksChangeSet");
				if (paramValues != null) {
			    		for(int i=0; i<paramValues.length; i++) {
							aTFSChangeRequest.addTracksChangeSet(new Link(new URI(paramValues[i])));
						}
				}			

      
    		final TFSChangeRequest newTFSChangeRequest = TFSAdapterManager.createTFSChangeRequest(httpServletRequest, aTFSChangeRequest, serviceProviderId);
   		
    		httpServletRequest.setAttribute("newResource", newTFSChangeRequest);
    		httpServletRequest.setAttribute("newResourceUri", newTFSChangeRequest.getAbout().toString());

    		// Send back to the form a small JSON response
    		httpServletResponse.setContentType("application/json");
    		httpServletResponse.setStatus(Status.CREATED.getStatusCode());
    		httpServletResponse.addHeader("Location", newTFSChangeRequest.getAbout().toString());
    		PrintWriter out = httpServletResponse.getWriter();
    		out.print("{" + "\"resource\" : \"" + newTFSChangeRequest.getAbout().toString() + "\"}");
    		out.close();
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new WebApplicationException(e);
    	}

    }
*/

	/**
	 * Create a single BugzillaChangeRequest via RDF/XML, XML or JSON POST
	 * 
	 * @param productId
	 * @param changeRequest
	 * @return
	 * @throws IOException
	 * @throws ServletException
	 */

/*  
 * Here create a ChangeRequestCreateService in context of a collection, BUT need additional
 * parameter of the project. And believe bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=430390
 * will make that not possible for now.
 *   
    @OslcDialogs(
    {
        @OslcDialog
		(
             title = "Change Request Creation Dialog",
             label = "Change Request Creation Dialog",
             uri = "/{serviceProviderId}/tfsChangeRequests/creator",
             hintWidth = "600px",
             hintHeight = "375px",
             resourceTypes = {TFSAdapterConstants.TYPE_TFSCHANGEREQUEST},
             usages = {OslcConstants.OSLC_USAGE_DEFAULT}
		)
    })
	@OslcCreationFactory
	(
		 title = "Change Request Creation Factory",
		 label = "Change Request Creation",
		 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + TFSAdapterConstants.PATH_TFSCHANGEREQUEST},
		 resourceTypes = {TFSAdapterConstants.TYPE_TFSCHANGEREQUEST},
		 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)
    @POST
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response addChangeRequest(@PathParam("productId") final String productId,
                                                             final TFSChangeRequest aTFSChangeRequest) throws IOException, ServletException
    {
        System.out.println("TBD - @POST  - parameters null - see bug431692");
    	return null; // See LAB 5 of the Lyo workshop for implementation
    }
*/
	// Start of user code (RECOMMENDED) functions
	
    
    /**
     * Updates a single change request via RDF/XML, XML or JSON PUT
     * 
     * @param eTagHeader
     * @param changeRequestId
     * @param changeRequest
     * @return
     * @throws IOException
     * @throws ServletException
     */
    @PUT
    @Consumes({ OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON })
    @Path("{workitemId}")
    public Response updateChangeRequest(
            @HeaderParam("If-Match") final String eTagHeader,
            @PathParam("workitemId") final String workItemId,
            final EnterpriseChangeRequest ecr)
            throws WebApplicationException {
    	
        try {
            ValidationMessages messages = TFSChangeRequestFactory.updateChangeRequest(ecr, workItemId, httpServletRequest);
            String responseMessage = messages.createReport();
            return Response.ok(Response.Status.OK).entity(responseMessage).build();
            //return Response.ok().build();
        } catch (UpdateWorkItemException e) {
            if (e.getStatusCode() == 403) {
                return Response.status(Response.Status.FORBIDDEN).entity(e.getMessage()).build();
            }
            return Response.status(Response.Status.CONFLICT).entity(e.getMessage()).build();
        }
    }	
    
    
    @OslcDialog
    (
    		title = "Change Request Creation Dialog",
    		label = "Change Request Creation Dialog",
    		uri = "workitems/{collectionId}/workitems" + "/creator",
            hintWidth = "600px",
            hintHeight = "375px",
            resourceTypes = { TFSAdapterConstants.TYPE_CHANGEREQUEST },
            usages = { OslcConstants.OSLC_USAGE_DEFAULT }
    )
	@OslcCreationFactory
	(
		 title = "Change Request Creation Factory",
		 label = "Change Request Creation",
		 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + TFSAdapterConstants.PATH_CHANGEREQUEST},
		 resourceTypes = {TFSAdapterConstants.TYPE_CHANGEREQUEST},
		 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)

    @POST
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Path("workitems")
    public Response createChangeRequest(
    		@PathParam("collectionId") final String collectionId,
            final EnterpriseChangeRequest aChangeRequest) throws IOException, ServletException {
        EnterpriseChangeRequest cr;
        try {
            cr = TFSChangeRequestFactory
                    .createChangeRequest(aChangeRequest, httpServletRequest,
                            uriInfo);
            return Response.created(cr.getAbout()).entity(cr).build();
        } catch (CreateWorkItemException e) {
            return Response.status(Response.Status.FORBIDDEN).entity(e.getMessage()).build();
//            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
        }
    }

	// End of user code

}


