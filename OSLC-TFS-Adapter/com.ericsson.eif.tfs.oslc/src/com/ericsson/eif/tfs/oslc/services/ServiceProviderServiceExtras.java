/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Michael Fiedler     - initial API and implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package com.ericsson.eif.tfs.oslc.services;


import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import org.apache.log4j.Logger;
import org.eclipse.lyo.oslc4j.core.annotation.OslcCreationFactory;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;

import com.ericsson.eif.tfs.oslc.TFSAdapterConstants;
import com.ericsson.eif.tfs.oslc.exception.CreateWorkItemException;
import com.ericsson.eif.tfs.oslc.factories.TFSChangeRequestFactory;
import com.ericsson.eif.tfs.oslc.resources.ChangeRequest;
import com.ericsson.eif.tfs.oslc.resources.EnterpriseChangeRequest;


// Start of user code imports
// End of user code


@OslcService(TFSAdapterConstants.CHANGE_MANAGEMENT_DOMAIN)
@Path("projects/{collectionId}/{serviceProviderId}/workitems")
public class ServiceProviderServiceExtras 
{
	@Context private HttpServletRequest httpServletRequest;
	@Context private HttpServletResponse httpServletResponse;
	@Context private UriInfo uriInfo;
	
	private static Logger logger = Logger.getLogger(ServiceProviderServiceExtras.class);
	
    public ServiceProviderServiceExtras()
    {
        super();
    }
    
    @OslcDialog
    (
    		title = "Change Request Creation Dialog",
    		label = "Change Request Creation Dialog",
    		uri = "projects/{collectionId}/{serviceProviderId}/workitems" + "/creator",
            hintWidth = "600px",
            hintHeight = "375px",
            resourceTypes = { TFSAdapterConstants.TYPE_CHANGEREQUEST },
            usages = { OslcConstants.OSLC_USAGE_DEFAULT }
    )
	@OslcCreationFactory
	(
		 title = "Change Request Creation Factory",
		 label = "Change Request Creation",
		 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + TFSAdapterConstants.PATH_CHANGEREQUEST},
		 resourceTypes = {TFSAdapterConstants.TYPE_CHANGEREQUEST},
		 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)

    @POST
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response createChangeRequest(
    		@PathParam("collectionId") final String collectionId,
    		@PathParam("serviceProviderId") final String serviceProviderId,
            final EnterpriseChangeRequest aChangeRequest) throws IOException, ServletException
    {
        EnterpriseChangeRequest cr;
        try {
            cr = TFSChangeRequestFactory
                    .createChangeRequest(
                            aChangeRequest, 
                            serviceProviderId,
                            httpServletRequest);
            return Response.created(cr.getAbout()).entity(cr).build();
        } catch (CreateWorkItemException e) {
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(e.getMessage()).build();
        }
    } 
    
    /**
     * RDF/XML, XML and JSON representations of workitems in a specific service provider
     * 
     * @param collectionId
     * @param serviceProviderId
     * @return
     */
    
    @GET
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ChangeRequest[] getChangeRequests(@PathParam("collectionId") final String collectionId,
											 @PathParam("serviceProviderId") final String serviceProviderId,
											 @QueryParam("oslc.where") final String where,
											 @QueryParam("page") final String pageString) throws IOException, ServletException 
    {
        try {
            List<EnterpriseChangeRequest> ecrs = 
                    TFSChangeRequestFactory.getChangeRequests(
                            collectionId, 
                            serviceProviderId, 
                            uriInfo);
            ChangeRequest[] crs = ecrs.toArray(new ChangeRequest[0]);
            return crs;

        } catch (URISyntaxException e) {
            logger.error(e.getLocalizedMessage(), e);
        }
    	throw new WebApplicationException(Status.NOT_FOUND);    	
    }
    
}


