/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *     Michael Fiedler      - implementation for Bugzilla adapter
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package com.ericsson.eif.tfs.oslc.services;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import org.eclipse.lyo.oslc4j.core.annotation.OslcDialog;
import org.eclipse.lyo.oslc4j.core.annotation.OslcQueryCapability;
import org.eclipse.lyo.oslc4j.core.annotation.OslcService;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcMediaType;
import org.eclipse.lyo.oslc4j.core.model.Service;
import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;

import com.ericsson.eif.tfs.oslc.servlet.ServiceProviderCatalogSingleton;

// Start of user code imports
// End of user code


@OslcService(OslcConstants.OSLC_CORE_DOMAIN)
@Path("projects/{collectionId}")
public class ServiceProviderService
{
	@Context private HttpServletRequest httpServletRequest;
	@Context private HttpServletResponse httpServletResponse;
	
	
	/**
	 * RDF/XML, XML and JSON representations of an OSLC Service Provider collection
	 * @return
	 */
	

    @OslcDialog
    (
         title = "Service Provider Selection Dialog",
         label = "Service Provider Selection Dialog",
         uri = "/projects/{collectionId}/selector",
         hintWidth = "1000px",
         hintHeight = "600px",
         resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER},
         usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
    @OslcQueryCapability
    (
         title = "Service Provider Query Capability",
         label = "Service Provider Query",
         resourceShape = OslcConstants.PATH_RESOURCE_SHAPES + "/" + OslcConstants.PATH_SERVICE_PROVIDER,
         resourceTypes = {OslcConstants.TYPE_SERVICE_PROVIDER},
         usages = {OslcConstants.OSLC_USAGE_DEFAULT}
    )
    
    /**
     * RDF/XML, XML and JSON representations of a all OSLC Service Providers in a collection
     * 
     * @param collectionId
     * @param serviceProviderId
     * @return
     */
    
    @GET
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ServiceProvider[] getServiceProviders(@PathParam("collectionId") final String collectionId)
    {
    	// TODO: Update to call with collection id - after refactor of singleton pattern
    	
    	httpServletResponse.addHeader("Oslc-Core-Version","2.0");
        return ServiceProviderCatalogSingleton.getServiceProviders(httpServletRequest);
    }    

    /**
     * RDF/XML, XML and JSON representations of a single OSLC Service Provider
     * 
     * @param serviceProviderId
     * @return
     */
    
    @GET
    @Path("{serviceProviderId}")
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public ServiceProvider getServiceProvider(@PathParam("collectionId") final String collectionId,
    		@PathParam("serviceProviderId") final String serviceProviderId)
    {
    	// TODO: Update to call with collection id - after refactor of singleton pattern
    	
    	httpServletResponse.addHeader("Oslc-Core-Version","2.0");
        return ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
    }
    
    /**
     * HTML representation of a single OSLC Service Provider
     * 
     * Forwards to serviceprovider_html.jsp to create the html document
     * 
     * @param serviceProviderId
     */
    @GET
    @Path("{serviceProviderId}")
    @Produces(MediaType.TEXT_HTML)
    public void getHtmlServiceProvider(@PathParam("collectionId") final String collectionId,
    		@PathParam("serviceProviderId") final String serviceProviderId)
    {
    	// TODO: Update to also take collection id - likely after removing the singleton pattern
    	
    	ServiceProvider serviceProvider = ServiceProviderCatalogSingleton.getServiceProvider(httpServletRequest, serviceProviderId);
    	Service [] services = serviceProvider.getServices();

        httpServletRequest.setAttribute("serviceProvider", serviceProvider);
        httpServletRequest.setAttribute("services", services);
		// Start of user code getHtmlServiceProvider_setAttributes
		// End of user code

        RequestDispatcher rd = httpServletRequest.getRequestDispatcher("/com/ericsson/eif/tfs/oslc/serviceProvider_html.jsp");
		try {
			rd.forward(httpServletRequest, httpServletResponse);
		} catch (Exception e) {				
			e.printStackTrace();
			throw new WebApplicationException(e);
		} 
    }

/*  
 * Below code should be here, but https://bugs.eclipse.org/bugs/show_bug.cgi?id=430390 prevent ...
 
    @Context private UriInfo uriInfo;
    
    @OslcDialog
    (
    		title = "Change Request Creation Dialog",
    		label = "Change Request Creation Dialog",
    		uri = "projects/{serviceProviderId}/workitems" + "/creator",
            hintWidth = "600px",
            hintHeight = "375px",
            resourceTypes = { TFSAdapterConstants.TYPE_CHANGEREQUEST },
            usages = { OslcConstants.OSLC_USAGE_DEFAULT }
    )
	@OslcCreationFactory
	(
		 title = "Change Request Creation Factory",
		 label = "Change Request Creation",
		 resourceShapes = {OslcConstants.PATH_RESOURCE_SHAPES + "/" + TFSAdapterConstants.PATH_CHANGEREQUEST},
		 resourceTypes = {TFSAdapterConstants.TYPE_CHANGEREQUEST},
		 usages = {OslcConstants.OSLC_USAGE_DEFAULT}
	)

    @POST
    @Path("workitems")
    @Consumes({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    @Produces({OslcMediaType.APPLICATION_RDF_XML, OslcMediaType.APPLICATION_XML, OslcMediaType.APPLICATION_JSON})
    public Response createChangeRequest(
    		@PathParam("collectionId") final String collectionId,
    		@PathParam("serviceProviderId") final String serviceProviderId,
            final ChangeRequest aChangeRequest) throws IOException, ServletException
    {
    	// TODO: Implement - current issue; no CR is created in request.
        
    	String id = "1";
    	URI about = null;
		try {
			about = new URI(uriInfo.getRequestUri().toString() + "/" + id);
		} catch (URISyntaxException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
  
        ChangeRequest cr = null;
		try {
			cr = new ChangeRequest();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        cr.setAbout(about);
        cr.setTitle("Dummy Workitem");
        cr.setIdentifier(id);
        
        return Response.created(cr.getAbout()).entity(cr).build();
    } 
    
*/ 
}
